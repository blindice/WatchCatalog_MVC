@using WatchCatalog_MVC.ViewModels;
@model WatchDetailsViewModel

@{
    ViewData["Title"] = Model.WatchName;
    var imageSrc = Model.Image ?? "/images/imagetemplate.png";
}
<div id="watchList-container" style="width: 100vw; display: flex; flex-direction: column; gap: 5vh">
    <section id="watchDetails" style="height: 100vh; width: 100%; display: flex; align-items: end; justify-content: center; padding: 0vh 6.5vw; padding-top: 13vh; column-gap: 5vw">
        <div class="card shadow-none" style="width: 50%; height: 100%; border: none; display: flex;">
            <div class="@Model.GetProductAvailabilityClass() card-img shadow-none" style="width: 80%; display: flex; justify-content: center;align-self: end; height: 95%; position: relative; overflow: hidden;">
                <img src=@imageSrc style="height: 100%; border-radius: 2vh; position: absolute; margin: auto" />
            </div>
        </div>
        <div style="width: 50%;align-self: start; height: 100%; display: flex; flex-direction: column; justify-content: start; row-gap: 1vh">
            <div style="font-family: 'Nunito', sans-serif">
                <div><p style="font-size: 3.5vh; font-family: 'Montserrat Alternates', sans-serif; font-weight: 500">@Model.WatchName</p></div>
                <p style="font-size: 2vh; font-weight: 500">฿ @Math.Round(Model.Price, 2)</p>
                <p style="text-align: justify; font-size: 2vh;"><em>@Model.Short_description.ToUpper()</em></p>
                <div style="height: 60%; border-bottom: 1px rgba(0, 0 ,0, 0.15 ) solid; margin-bottom: 1vh"><p style="text-align: justify; font-size: 2vh;">@Model.Full_Description</p></div>

            </div>
            <div style="margin-bottom: 2vh; display:flex; width: 100%; justify-content:space-between; column-gap: 1vw">
                <button id="btnToggle" class="@Model.ToggleButtonClass()" style="width:25%">@Model.ToggleButtonName()</button>
                <button id="btnUpdate" class="btn btn-outline-primary btn-sm" style="width:25%">Edit</button>
                <button id="btnDelete" class="btn btn-outline-primary btn-sm" style="width:25%">Delete</button>
                <a class="btn btn-outline-primary btn-sm" style="width:25%; display: flex; align-items: center; justify-content:center" href='javascript:history.go(-1)'>Back</a>
            </div>
            <div class="accordion accord" id="accordionExample">
                <div class="accordion-item" style="font-family: 'Nunito', sans-serif">
                    <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            Specifications
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                        <div class="accordion-body" style="display: grid; grid-template-columns: 7vw 1fr">
                            <p style="font-size: 2vh; font-weight: 700">Caliber:</p>
                            <p style="font-size: 2vh;">@Model.Caliber</p>
                            <p style="font-size: 2vh; font-weight: 700">Chronograph:</p>
                            <p style="font-size: 2vh;">@Model.Chronograph</p>
                            <p style="font-size: 2vh; font-weight: 700">Diameter:</p>
                            <p style="font-size: 2vh;">@Model.Diameter mm</p>
                            <p style="font-size: 2vh; font-weight: 700">Weight:</p>
                            <p style="font-size: 2vh;">@Model.Weight g</p>
                            <p style="font-size: 2vh; font-weight: 700">Height:</p>
                            <p style="font-size: 2vh;">@Model.Height mm</p>
                            <p style="font-size: 2vh; font-weight: 700">Thickness:</p>
                            <p style="font-size: 2vh;">@Model.Thickness mm</p>
                        </div>
                    </div>
                </div>
                <div class="accordion-item" style="font-family: 'Nunito', sans-serif">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            Materials
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body" style="display: grid; grid-template-columns: 4vw 1fr">
                            <p style="font-size: 2vh; font-weight: 700">Strap:</p>
                            <p style="font-size: 2vh;">@Model.Strap</p>
                            <p style="font-size: 2vh;font-weight: 700">Jewel:</p>
                            <p style="font-size: 2vh;">@Model.Jewel</p>
                            <p style="font-size: 2vh;font-weight: 700">Case:</p>
                            <p style="font-size: 2vh;">@Model.Case</p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <video autoplay loop muted playsinline src="~/videos/scroll2.mp4" style="position: absolute; top: 90vh; height: 10vh; z-index: -1"></video>
    </section>
    <div style="padding: 0vh 6.5vw; margin-bottom: -10vh; margin-top: 10vh"><p style="font-size: 2.5vh; font-family: 'Montserrat Alternates', sans-serif; font-weight: 500">Browse more Watches...</p></div>

    <partial name="_WatchList" />
    <partial name="_Modal" />
    <partial name="_BackToTopButton" />
</div>

@section Scripts{
    <script>
        $(() => {
            //accodion
            $("#collapseTwo").on("show.bs.collapse", () => {
                window.scrollTo(0, 200, 'smooth');
            }).on("hide.bs.collapse", () => {
                window.scrollTo(0, 0, 'smooth');
            })
            $("#collapseOne").on("show.bs.collapse", () => {
                window.scrollTo(0, 50, 'smooth');
            }).on("hide.bs.collapse", () => {
                window.scrollTo(0, 0, 'smooth');
            })

            //add
            $("#btnAdd").css({ "visibility": "hidden" })
            createWatchListPartialScript()

            // modal
            const submitBtn = $("#btnSubmitModal")
            const submitBtnBeforeText = submitBtn.text()

            $("#btnUpdate").click(function () {
                callModalBody($(this), { url: '@Url.Action("ModalBody")', method: "POST", id: @Model.WatchId, submitFn: formSubmit })
            })

            var formSubmit = function (event) {
                event.preventDefault()
                var form = new FormData();
                form.append("image", imageFile.files[0]);
                form.append("watchname", $("#WatchName").val());
                form.append("case", $("#Case").val());
                form.append("jewel", $("#Jewel").val());
                form.append("strap", $("#Strap").val());
                form.append("caliber", $("#Caliber").val());
                form.append("full_description", $("#Full_Description").val());
                form.append("short_description", $("#Short_description").val());
                form.append("watchId", @Model.WatchId);
                form.append("Chronograph", $("#Chronograph").val());
                form.append("price", $("#Price").val());
                form.append("height", $("#Height").val());
                form.append("weight", $("#Weight").val());
                form.append("diameter", $("#Diameter").val());
                form.append("isActive", @Model.IsActive.ToString().ToLower());
                form.append("thickness", $("#Thickness").val());

                $.ajax({
                    url: "/updatewatch",
                    method: "PUT",
                    timeout: 0,
                    processData: false,
                    mimeType: "multipart/form-data",
                    contentType: false,
                    data: form,
                    beforeSend: () => {
                        submitBtn.attr("disabled", "disabled")
                        submitBtn.text(" Loading...")
                        submitBtn.prepend('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>')
                    },
                    success: (res) => {
                        submitBtn.removeAttr("disabled")
                        submitBtn.text(submitBtnBeforeText)

                        Swal.fire({
                            icon: 'success',
                            title: 'Watch successfully Updated!',
                            showConfirmButton: false,
                            timer: 3000,
                        }).then(() => {
                            window.location = '@Url.Action("Details")'
                        })
                    },
                    error: (xhr, ajaxOptions, thrownError) => {
                        if (xhr.status == 404) {
                            console.log(xhr)
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: xhr.responseText,
                                showConfirmButton: false,
                                timer: 3000,
                            }).then(() => {
                                submitBtn.removeAttr("disabled")
                                submitBtn.text(submitBtnBeforeText)
                            })
                        }
                        else {
                            window.location = `/error?statusCode=${xhr.status}&message=${xhr.responseText}`;
                        }
                    }
                })
            }

            //toggle
            $("#btnToggle").click(async function () {
                await $.ajax({
                    type: 'POST',
                    url: '/togglewatch',
                    data: JSON.stringify({ watchId: @Model.WatchId, isActive: @Model.IsActive.ToString().ToLower()}),
                    dataType: 'json',
                    contentType: "application/json",
                    beforeSend: () => {
                        $(this).attr("disabled", "disabled")
                        $(this).text("Loading...")
                    },
                    success: (result) => {
                        location.reload(true);
                    },
                    error: (err) => {
                        alert(JSON.stringify(err))
                    }
                })
            })

            //delete
            $("#btnDelete").click(async () => {
                Swal.fire({
                    icon: 'warning',
                    title: 'Are you sure to delete this watch?',
                    buttonsStyling: false,
                    showCancelButton: true,
                    confirmButtonText: 'Delete',
                    confirmButtonColor: '#dc3545',
                    customClass: {
                        confirmButton: 'btn btn-danger me-4',
                        cancelButton: 'btn btn-outline-danger'
                    },
                    showLoaderOnConfirm: true,
                    preConfirm: async (login) => {
                        await $.ajax({
                            url: `/deletewatch/${@Model.WatchId}`,
                            method: "DELETE",
                            timeout: 0,
                            error: (xhr, ajaxOptions, thrownError) => {
                                if (xhr.status == 404) {
                                    console.log(xhr)
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: xhr.responseText,
                                        showConfirmButton: false,
                                        timer: 3000,
                                    }).then(() => {
                                        submitBtn.removeAttr("disabled")
                                        submitBtn.text(submitBtnBeforeText)
                                    })
                                }
                                else {
                                    window.location = `/error?statusCode=${xhr.status}&message=${xhr.responseText}`;
                                }
                            }
                        })
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Watch successfully Deleted!',
                            showConfirmButton: false,
                            timer: 3000,
                        }).then(() => {
                            window.location = `@Url.Action("WatchList")`
                        })
                    }
                })
            })
        })
    </script>
}